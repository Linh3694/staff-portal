// controllers/pdfController.js
const Pdf = require("../models/Pdf");
const { convertPdfToImages } = require("../utils/convertPdfToImages");
const fs = require("fs");
const path = require("path");

exports.uploadPdf = async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: "No PDF file uploaded." });
    }

    const pdfFilePath = req.file.path;
    const folderName = path.basename(pdfFilePath, path.extname(pdfFilePath));

    // Chu·∫©n h√≥a `customName`
    let customName = req.body.customName
      ?.trim()
      .toLowerCase()
      .normalize("NFD") // Lo·∫°i b·ªè d·∫•u Ti·∫øng Vi·ªát
      .replace(/[\u0300-\u036f]/g, "")
      .replace(/\s+/g, "-") || folderName;

    // üìå **KI·ªÇM TRA TR√ôNG `customName`**
    const existingPdf = await Pdf.findOne({ customName });

    if (existingPdf) {
      return res.status(400).json({ 
        error: `File v·ªõi customName "${customName}" ƒë√£ t·ªìn t·∫°i! H√£y ch·ªçn t√™n kh√°c.` 
      });
    }

    // Convert PDF -> ·∫¢nh
    await convertPdfToImages(pdfFilePath, folderName, 150);

    // L∆∞u v√†o MongoDB
    const newPdf = new Pdf({
      fileName: req.file.originalname,
      customName,
      folderName,
    });
    await newPdf.save();

    res.json({ folderName, customName });
  } catch (err) {
    console.error("‚ùå Error converting PDF:", err);
    res.status(500).json({ error: "L·ªói convert PDF" });
  }
};

exports.getImages = async (req, res) => {
  try {
    const { customName } = req.params;
    console.log("üîç API nh·∫≠n customName:", customName);
    const pdfData = await Pdf.findOne({ customName });
   
    if (!pdfData) {
      return res.status(404).json({
        error: `Kh√¥ng t√¨m th·∫•y PDF v·ªõi customName: "${customName}"`,
      });
    }
    console.log("üìÇ Folder name trong DB:", pdfData.folderName);

    // Th∆∞ m·ª•c g·ªëc ƒëang l∆∞u ·∫£nh
    const imageDir = path.join(__dirname, "..", "public", "uploads", "pdf-images");

    if (!fs.existsSync(imageDir)) {
      return res.status(404).json({
        error: `Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c ·∫£nh cho PDF "${customName}"`,
      });
    }

    // T√¨m c√°c file .png b·∫Øt ƒë·∫ßu v·ªõi folderName
    const allFiles = fs.readdirSync(imageDir);
    const imageFiles = allFiles.filter(
      (file) =>
        file.startsWith(pdfData.folderName) && file.endsWith(".png")
    );

    if (imageFiles.length === 0) {
      return res
        .status(404)
        .json({ error: `Kh√¥ng t√¨m th·∫•y ·∫£nh cho PDF "${customName}"` });
    }

    // T·∫°o ƒë∆∞·ªùng d·∫´n URL (host/uploads/pdf-images/<filename>)
    const imageUrls = imageFiles.map((file) => {
      return `${req.protocol}://${req.get("host")}/uploads/pdf-images/${file}`;
    });

    res.json({ images: imageUrls });
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y ·∫£nh:", err);
    res.status(500).json({ error: "L·ªói server khi l·∫•y ·∫£nh." });
  }
};

exports.getAllPdfs = async (req, res) => {
  try {
    const pdfs = await Pdf.find().sort({ uploadDate: -1 });
    console.log("üìÇ D·ªØ li·ªáu t·ª´ MongoDB:", pdfs); // Ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ
    res.json(
      pdfs.map((pdf) => ({
        _id: pdf._id,
        fileName: pdf.fileName,
        customName: pdf.customName,
        folderName: pdf.folderName, // ‚úÖ TH√äM `folderName` N·∫æU C·∫¶N
        uploadDate: new Date(pdf.uploadDate).toLocaleString(),
      }))
    );
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch PDF:", err);
    res.status(500).json({ error: "L·ªói khi t·∫£i danh s√°ch file." });
  }
};

exports.updateCustomName = async (req, res) => {
  try {
    const { id } = req.params;
    const { newCustomName } = req.body;

    if (!newCustomName || newCustomName.trim() === "") {
      return res.status(400).json({ error: "T√™n m·ªõi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng." });
    }

    // Chu·∫©n h√≥a `customName`
    const sanitizedCustomName = newCustomName
      .trim()
      .toLowerCase()
      .normalize("NFD") // Lo·∫°i b·ªè d·∫•u Ti·∫øng Vi·ªát
      .replace(/[\u0300-\u036f]/g, "")
      .replace(/\s+/g, "-");

    // Ki·ªÉm tra tr√πng l·∫∑p
    const existingPdf = await Pdf.findOne({ customName: sanitizedCustomName });
    if (existingPdf) {
      return res.status(400).json({ error: `CustomName "${sanitizedCustomName}" ƒë√£ t·ªìn t·∫°i!` });
    }

    // C·∫≠p nh·∫≠t v√†o database
    const updatedPdf = await Pdf.findByIdAndUpdate(
      id,
      { customName: sanitizedCustomName },
      { new: true }
    );

    if (!updatedPdf) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y t√†i li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t." });
    }

    res.json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!", updatedPdf });
  } catch (err) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t customName:", err);
    res.status(500).json({ error: "L·ªói server khi c·∫≠p nh·∫≠t customName." });
  }
};

exports.deletePdf = async (req, res) => {
  try {
    const { id } = req.params;
    
    // Ki·ªÉm tra xem t√†i li·ªáu c√≥ t·ªìn t·∫°i kh√¥ng
    const pdfData = await Pdf.findById(id);
    if (!pdfData) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y t√†i li·ªáu." });
    }

    // X√≥a t√†i li·ªáu kh·ªèi DB
    await Pdf.findByIdAndDelete(id);

    res.json({ message: "X√≥a t√†i li·ªáu th√†nh c√¥ng!" });
  } catch (err) {
    console.error("‚ùå L·ªói khi x√≥a t√†i li·ªáu:", err);
    res.status(500).json({ error: "L·ªói server khi x√≥a t√†i li·ªáu." });
  }
};