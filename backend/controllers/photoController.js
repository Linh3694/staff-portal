const Photo = require("../models/Photos");
const Event = require("../models/Events");

// L·∫•y danh s√°ch ·∫£nh theo ID s·ª± ki·ªán
exports.getPhotosByEvent = async (req, res) => {
  const { eventId, userId } = req.query;
  try {
    const photos = await Photo.find({ eventId, approved: true }); // Ch·ªâ l·∫•y ·∫£nh ƒë√£ ph√™ duy·ªát
    // G·∫Øn th√™m tr·∫°ng th√°i isVoted cho m·ªói ·∫£nh
    const updatedPhotos = photos.map((photo) => ({
      ...photo._doc,
      isVoted: photo.voters.includes(userId),
    }));
    
    res.status(200).json(updatedPhotos);
  } catch (error) {
    console.error("Error fetching photos:", error);
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch ·∫£nh!" });
  }
};

// Th√™m ·∫£nh m·ªõi
exports.uploadPhoto = async (req, res) => {
  console.log(req.body);
  console.log(req.file);

  const { eventId, title, message, uploaderName } = req.body;
  const url = `/uploads/Events/${req.file?.filename}`; // ƒê∆∞·ªùng d·∫´n file

  try {
    const event = await Event.findById(eventId); // Ki·ªÉm tra s·ª± ki·ªán c√≥ t·ªìn t·∫°i kh√¥ng
    if (!event) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán!" });
    }

    // T·∫°o ·∫£nh m·ªõi v·ªõi tr·∫°ng th√°i "ch∆∞a ph√™ duy·ªát"
    const newPhoto = new Photo({ eventId, title, url, message, uploaderName, approved: false });
    await newPhoto.save();
    res.status(201).json({ message: "·∫¢nh ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n v√† ch·ªù ph√™ duy·ªát!", newPhoto });
  } catch (error) {
    console.error("Error uploading photo:", error);
    res.status(500).json({ message: "L·ªói khi t·∫£i ·∫£nh l√™n!" });
  }
};

exports.getPendingPhotos = async (req, res) => {
  try {
    const pendingPhotos = await Photo.find({ approved: false }); // L·∫•y ·∫£nh ch∆∞a ph√™ duy·ªát
    res.status(200).json(pendingPhotos);
  } catch (error) {
    console.error("Error fetching pending photos:", error);
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch ·∫£nh ch∆∞a ƒë∆∞·ª£c ph√™ duy·ªát!" });
  }
};

exports.approvePhoto = async (req, res) => {
  const { id } = req.params;

  try {
    const photo = await Photo.findByIdAndUpdate(
      id,
      { approved: true }, // C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√™ duy·ªát
      { new: true }
    );

    if (!photo) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ·∫£nh!" });
    }

    res.status(200).json({ message: "·∫¢nh ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát!", photo });
  } catch (error) {
    console.error("Error approving photo:", error);
    res.status(500).json({ message: "L·ªói khi ph√™ duy·ªát ·∫£nh!" });
  }
};

// Vote cho ·∫£nh
exports.votePhoto = async (req, res) => {
  try {
    const { id } = req.params; // ID ·∫£nh
    const { userId } = req.body; // ID ng∆∞·ªùi d√πng

    console.log("üü° Nh·∫≠n y√™u c·∫ßu vote t·ª´ client:", { id, userId });

    if (!userId) {
      return res.status(400).json({ message: "Thi·∫øu userId!" });
    }

    // T√¨m ·∫£nh trong database
    const photo = await Photo.findById(id);
    if (!photo) {
      return res.status(404).json({ message: "·∫¢nh kh√¥ng t·ªìn t·∫°i!" });
    }

    console.log("‚úÖ ·∫¢nh t√¨m th·∫•y:", photo);

    const hasVoted = photo.votedUsers.includes(userId);

    // N·∫øu ƒë√£ vote -> B·ªè vote
    if (hasVoted) {
      await Photo.findByIdAndUpdate(id, {
        $pull: { votedUsers: userId }, // X√≥a userId kh·ªèi danh s√°ch vote
        $inc: { votes: -1 } // Gi·∫£m s·ªë vote ƒëi 1
      });
      console.log("‚ùå Ng∆∞·ªùi d√πng ƒë√£ b·ªè vote:", userId);
      return res.status(200).json({ isVoted: false, votes: Math.max(0, photo.votes - 1) });
    } 
    // N·∫øu ch∆∞a vote -> Vote
    else {
      await Photo.findByIdAndUpdate(id, {
        $push: { votedUsers: userId }, // Th√™m userId v√†o danh s√°ch vote
        $inc: { votes: 1 } // TƒÉng s·ªë vote l√™n 1
      });
      console.log("‚ù§Ô∏è Ng∆∞·ªùi d√πng ƒë√£ vote:", userId);
      return res.status(200).json({ isVoted: true, votes: photo.votes + 1 });
    }
  } catch (error) {
    console.error("‚ùå L·ªói khi th·∫£/b·ªè vote:", error);
    return res.status(500).json({ message: "L·ªói server!" });
  }
};

// Th√™m b√¨nh lu·∫≠n v√†o ·∫£nh
exports.addComment = async (req, res) => {
  console.log(req.params)
  console.log(req.body)
  const { id } = req.params; // ID c·ªßa ·∫£nh
  const { text, user } = req.body; // N·ªôi dung b√¨nh lu·∫≠n v√† t√™n ng∆∞·ªùi d√πng

  if (!text || !user) {
    return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p n·ªôi dung v√† t√™n ng∆∞·ªùi b√¨nh lu·∫≠n!" });
  }

  try {
    const photo = await Photo.findById(id);
    if (!photo) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ·∫£nh!" });
    }

    // Th√™m b√¨nh lu·∫≠n
    photo.comments.push({ text, user });
    await photo.save();
    res.status(200).json(photo.comments); // Tr·∫£ v·ªÅ danh s√°ch b√¨nh lu·∫≠n m·ªõi
  } catch (error) {
    console.error("Error adding comment:", error);
    res.status(500).json({ message: "L·ªói khi th√™m b√¨nh lu·∫≠n!" });
  }
};

// L·∫•y danh s√°ch b√¨nh lu·∫≠n c·ªßa ·∫£nh
exports.getComments = async (req, res) => {
  const { id } = req.params; // ID c·ªßa ·∫£nh

  try {
    const photo = await Photo.findById(id);
    if (!photo) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ·∫£nh!" });
    }

    res.status(200).json(photo.comments);
  } catch (error) {
    console.error("Error fetching comments:", error);
    res.status(500).json({ message: "L·ªói khi l·∫•y b√¨nh lu·∫≠n!" });
  }
};

// X√≥a ·∫£nh
exports.deletePhoto = async (req, res) => {
  const { id } = req.params;

  try {
    const deletedPhoto = await Photo.findByIdAndDelete(id);
    if (!deletedPhoto) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ·∫£nh ƒë·ªÉ x√≥a!" });
    }
    res.status(200).json({ message: "X√≥a ·∫£nh th√†nh c√¥ng!" });
  } catch (error) {
    console.error("Error deleting photo:", error);
    res.status(500).json({ message: "L·ªói khi x√≥a ·∫£nh!" });
  }
};

exports.getLeaderboard = async (req, res) => {
  const { eventId } = req.query;

  try {
    const leaderboard = await Photo.find({ eventId, approved: true })
      .sort({ votes: -1 }) // S·∫Øp x·∫øp gi·∫£m d·∫ßn theo s·ªë vote
      .select("uploaderName title votes url eventId message comments"); // Th√™m tr∆∞·ªùng url ƒë·ªÉ tr·∫£ v·ªÅ ·∫£nh
    
      res.status(200).json(leaderboard);
  } catch (error) {
    console.error("Error fetching leaderboard:", error);
    res.status(500).json({ message: "Failed to fetch leaderboard." });
  }
};

// L·∫•y leaderboard c·ªßa t·∫•t c·∫£ s·ª± ki·ªán (th·ª≠ th√°ch)
exports.getLeaderboardAll = async (req, res) => {
  try {
    // L·∫•y danh s√°ch t·∫•t c·∫£ c√°c s·ª± ki·ªán
    const events = await Event.find().select("_id name number"); 

    if (!events.length) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y th·ª≠ th√°ch n√†o!" });
    }

    // L·∫•y danh s√°ch ·∫£nh t·ª´ t·∫•t c·∫£ th·ª≠ th√°ch (eventId)
    const leaderboardData = await Promise.all(
      events.map(async (event) => {
        const photos = await Photo.find({ eventId: event._id, approved: true })
          .sort({ votes: -1 }) // S·∫Øp x·∫øp theo s·ªë vote gi·∫£m d·∫ßn
          .select("uploaderName title votes url eventId message createdAt comments");

        return {
          eventId: event._id,
          eventName: event.name,
          eventNumber: event.number,
          photos,
        };
      })
    );

    res.status(200).json(leaderboardData);
  } catch (error) {
    console.error("Error fetching leaderboard for all events:", error);
    res.status(500).json({ message: "L·ªói khi l·∫•y leaderboard c·ªßa t·∫•t c·∫£ s·ª± ki·ªán." });
  }
};


// L·∫•y chi ti·∫øt ·∫£nh theo ID
exports.getPhotoById = async (req, res) => {
  const { id } = req.params;
  const { userId } = req.query; // Nh·∫≠n userId t·ª´ query params

  try {
    // T√¨m ·∫£nh theo ID
    const photo = await Photo.findById(id);
    if (!photo) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ·∫£nh!" });
    }

    // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒë√£ vote hay ch∆∞a
    const isVoted = userId ? photo.votedUsers.includes(userId) : false;

    // Tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt ·∫£nh
    res.status(200).json({ ...photo.toObject(), isVoted });
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y chi ti·∫øt ·∫£nh:", error);
    res.status(500).json({ message: "L·ªói khi l·∫•y th√¥ng tin ·∫£nh!" });
  }
};

