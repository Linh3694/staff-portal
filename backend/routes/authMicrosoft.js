// backend/routes/authMicrosoft.js
const express = require("express");
const passport = require("passport");
const { OIDCStrategy } = require("passport-azure-ad");
const jwt = require("jsonwebtoken");
const User = require("../models/Users");
const router = express.Router();

const azureConfig = require("../config/azure");

// C·∫•u h√¨nh passport strategy v·ªõi OIDCStrategy
passport.use(
  new OIDCStrategy(
    {
      identityMetadata: `https://login.microsoftonline.com/${azureConfig.credentials.tenantID}/v2.0/.well-known/openid-configuration`,
      clientID: azureConfig.credentials.clientID,
      clientSecret: azureConfig.credentials.clientSecret,
      responseType: "code",
      responseMode: "query",
      redirectUrl: azureConfig.credentials.callbackURL,
      allowHttpForRedirectUrl: true,
      passReqToCallback: false,
      scope: ["User.Read", "profile", "email", "openid"],
      // Th√™m c√°c tu·ª≥ ch·ªçn debug
    loggingLevel: "info",
    validateIssuer: false, // N·∫øu b·∫°n mu·ªën t·∫Øt x√°c th·ª±c issuer (ƒë·∫∑c bi·ªát l√† khi d√πng multi-tenant)
    },
    // Callback khi nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ Microsoft
    async (iss, sub, profile, accessToken, refreshToken, params, done) => {
        console.log("B·∫Øt ƒë·∫ßu callback OIDCStrategy");
        console.log("üì¢ D·ªØ li·ªáu t·ª´ Microsoft tr·∫£ v·ªÅ:", JSON.stringify(profile, null, 2));
        console.log("üîë Access Token:", accessToken);

        if (!profile || !profile._json) {
          console.error("‚ùå L·ªói: Kh√¥ng nh·∫≠n ƒë∆∞·ª£c th√¥ng tin user t·ª´ Microsoft.");
          return done(null, false, { message: "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c th√¥ng tin t·ª´ Microsoft" });
        }
      
        try {
        // L·∫•y email v√† t√™n t·ª´ profile tr·∫£ v·ªÅ t·ª´ Microsoft
        const email = profile._json.preferred_username;
        const displayName = profile.displayName || "No name";

        // Ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i trong database ch∆∞a
        let user = await User.findOne({ email });
        if (!user) {
          // N·∫øu ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi user v·ªõi flag needProfileUpdate = true
          user = new User({
            fullname: displayName,
            email,
            password: "", // V√¨ d√πng OAuth n√™n kh√¥ng c·∫ßn m·∫≠t kh·∫©u
            role: "user", // Ho·∫∑c gi√° tr·ªã m·∫∑c ƒë·ªãnh
            needProfileUpdate: true, // ƒê√°nh d·∫•u y√™u c·∫ßu b·ªï sung th√¥ng tin
          });
          await user.save();
        }
        // N·∫øu user ƒë√£ t·ªìn t·∫°i, b·∫°n c√≥ th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin (n·∫øu c·∫ßn)
        return done(null, user);
      } catch (error) {
        return done(error, null);
      }
    }
  )
);

// Serialize/Deserialize (n·∫øu d√πng session)
passport.serializeUser((user, done) => done(null, user.id));
passport.deserializeUser(async (id, done) => {
  const user = await User.findById(id);
  done(null, user);
});

// Route b·∫Øt ƒë·∫ßu flow OAuth v·ªõi Microsoft
router.get("/microsoft", (req, res, next) => {
    console.log("Request ƒë·∫øn /api/auth/microsoft");
    next();
  }, passport.authenticate("azuread-openidconnect"));

// Route callback v·ªõi custom callback ƒë·ªÉ x·ª≠ l√Ω l·ªói v√† chuy·ªÉn h∆∞·ªõng theo flag needProfileUpdate
router.get("/microsoft/callback", (req, res, next) => {
    console.log("Query parameters in callback:", req.query);
  passport.authenticate("azuread-openidconnect", (err, user, info) => {
    if (err) {
        console.error("L·ªói t·ª´ Microsoft OAuth:", err);
        return res.redirect(`http://localhost:3000/login?error=${encodeURIComponent("L·ªói t·ª´ Microsoft OAuth: " + err.message)}`);
      }
      if (!user) {
        console.error("L·ªói x√°c th·ª±c: Kh√¥ng t√¨m th·∫•y user trong database ho·∫∑c authentication b·ªã t·ª´ ch·ªëi t·ª´ Microsoft.");
        
        if (info && info.message) {
          console.error("Chi ti·∫øt l·ªói t·ª´ Passport:", info.message);
          return res.redirect(`http://localhost:3000/login?error=${encodeURIComponent("Authentication failed: " + info.message)}`);
        } else {
          console.error("Kh√¥ng c√≥ th√¥ng tin c·ª• th·ªÉ t·ª´ Passport.");
          return res.redirect(`http://localhost:3000/login?error=Authentication+failed:+User+not+found+or+denied+by+Microsoft`);
        }
      }
    try {
      // T·∫°o JWT token
      const token = jwt.sign(
        { id: user._id, role: user.role },
        process.env.JWT_SECRET,
        { expiresIn: "30d" }
      );
      const frontendURL = process.env.FRONTEND_URL || "http://localhost:3000";
      
      // N·∫øu user c·∫ßn c·∫≠p nh·∫≠t th√¥ng tin (ch∆∞a ho√†n t·∫•t h·ªì s∆°)
      if (user.needProfileUpdate) {
        // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ho√†n t·∫•t h·ªì s∆° (frontend)
        return res.redirect(`${frontendURL}/complete-profile?token=${token}`);
      } else {
        // N·∫øu kh√¥ng c·∫ßn c·∫≠p nh·∫≠t, chuy·ªÉn h∆∞·ªõng t·ªõi trang th√†nh c√¥ng
        return res.redirect(`${frontendURL}/auth/microsoft/success?token=${token}`);
      }
    } catch (tokenError) {
      console.error("L·ªói khi t·∫°o JWT:", tokenError);
      return res.redirect(`http://localhost:3000/login?error=${encodeURIComponent(tokenError.message)}`);
    }
  })(req, res, next);
});

module.exports = router;